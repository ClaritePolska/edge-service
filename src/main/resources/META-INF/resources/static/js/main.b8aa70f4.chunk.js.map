{"version":3,"sources":["services/edge.service.js","models/coordinates.model.js","services/location.service.js","App.js","reportWebVitals.js","index.js"],"names":["a","fetch","process","response","json","serialNumber","console","log","CoordinatesModel","lat","lon","this","navigator","options","enableHighAccuracy","Promise","resolve","reject","geolocation","getCurrentPosition","position","coordinates","coords","latitude","longitude","defaultCoords","latlon","address","country","city","town","App","useState","setSerialNumber","name","setName","setAddress","setCoordinates","keystorePassword","setKeystorePassword","keystorePasswordConfirmation","setKeystorePasswordConfirmation","nameValid","setNameValid","keystorePasswordValid","setKeystorePasswordValid","keystorePasswordConfirmationValid","setKeystorePasswordConfirmationValid","showSuccess","setShowSuccess","useEffect","EdgeService","getSerialNumber","then","value","LocationService","getLocationDetails","className","onSubmit","e","preventDefault","match","method","headers","body","JSON","stringify","serial","resp","setTimeout","role","htmlFor","id","type","aria-describedby","placeholder","onChange","target","disabled","required","pattern","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8aa70f4.chunk.js","sourcesContent":["class EdgeService {\r\n    async getSerialNumber() {\r\n        const response = await fetch(\r\n            `${process.env.REACT_APP_EDGE_SERVICE_URL}/serial-number`\r\n        );\r\n        const { serialNumber } = await response.json();\r\n        console.log(serialNumber);\r\n        return serialNumber;\r\n    }\r\n}\r\n\r\nexport default new EdgeService();","class CoordinatesModel {\r\n    constructor(lat, lon) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n    }\r\n}\r\nexport default CoordinatesModel;","import CoordinatesModel from \"../models/coordinates.model\";\r\nconst apiKey = process.env.REACT_APP_MY_API_KEY_LOCATION;\r\n\r\nclass LocationService {\r\n    getCurrentPosition() {\r\n        if (\"geolocation\" in navigator) {\r\n            console.log(\"Available\");\r\n            const options = {\r\n                enableHighAccuracy: true,\r\n            };\r\n\r\n            return new Promise((resolve, reject) =>\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        const coordinates = new CoordinatesModel(\r\n                            position.coords.latitude,\r\n                            position.coords.longitude\r\n                        );\r\n\r\n                        resolve(coordinates);\r\n                    },\r\n                    () => {\r\n                        const defaultCoords = new CoordinatesModel(52.184139, 21.020510);\r\n                        resolve(defaultCoords);\r\n                    },\r\n                    options\r\n                )\r\n            );\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                const defaultCoords = new CoordinatesModel(52.184139, 21.020510);\r\n                resolve(defaultCoords);\r\n            });\r\n        }\r\n    }\r\n\r\n    async getLocationDetails(latlon) {\r\n        const response = await fetch(\r\n            \"https://us1.locationiq.com/v1/reverse.php?key=\" +\r\n            apiKey +\r\n            \"&lat=\" +\r\n            latlon.lat +\r\n            \"&lon=\" +\r\n            latlon.lon +\r\n            \"&format=json\"\r\n        );\r\n        const {address:{country, city, town}} = await response.json();\r\n        return {country, city: city ?? town};\r\n    }\r\n}\r\nexport default new LocationService();","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport EdgeService from './services/edge.service.js';\nimport LocationService from './services/location.service';\n\nconst App = () => {\n    const [serialNumber, setSerialNumber] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [coordinates, setCoordinates] = useState();\n    const [keystorePassword, setKeystorePassword] = useState(\"\");\n    const [keystorePasswordConfirmation, setKeystorePasswordConfirmation] = useState(\"\");\n    const [nameValid, setNameValid] = useState(true);\n    const [keystorePasswordValid, setKeystorePasswordValid] = useState(true);\n    const [keystorePasswordConfirmationValid, setKeystorePasswordConfirmationValid] = useState(true);\n    const [showSuccess, setShowSuccess] = useState(false);\n\n    useEffect(() => {\n        EdgeService.getSerialNumber().then(value => setSerialNumber(value));\n    }, []);\n\n    useEffect(() => {\n        LocationService.getCurrentPosition()\n            .then(value => {\n                setCoordinates({\n                    latitude: value.lat,\n                    longitude: value.lon\n                })\n                return LocationService.getLocationDetails(value)\n            })\n            .then(value => {\n                setAddress(`${value.country}, ${value.city}`)\n            })\n    }, [])\n\n    return (\n        <div className=\"container m-5\">\n            <form className=\"needs-validation\" onSubmit={e => {\n                e.preventDefault();\n\n                const {latitude, longitude} = coordinates;\n\n                if (!name || !name.match(/[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)) {\n                    setNameValid(false);\n                    return;\n                }\n\n                if (!keystorePassword || !keystorePasswordConfirmation || keystorePassword!==keystorePasswordConfirmation) {\n                    setKeystorePasswordValid(false);\n                    setKeystorePasswordConfirmationValid(false);\n                    return;\n                }\n\n                fetch(`${process.env.REACT_APP_EDGE_SERVICE_URL}/register`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({latitude, longitude, serial: serialNumber, keystorePassword, name})\n                }).then(resp => {\n                    setShowSuccess(true);\n                    setTimeout(() => {\n                        setShowSuccess(false);\n                        setName('');\n                        setKeystorePassword('');\n                        setKeystorePasswordConfirmation('');\n                    }, 2000)\n                });\n            }}>\n                {showSuccess && <div className=\"alert alert-success\" role=\"alert\">\n                    <h4 className=\"alert-heading\">Success!</h4>\n                    <p>The edge device was registered successfully!</p>\n                </div>}\n\n                <div className=\"form-group mt-2\">\n                    <label htmlFor=\"serial-number\">Serial number</label>\n                    <input\n                        id=\"serial-number\"\n                        className=\"form-control\"\n                        type=\"text\"\n                        aria-describedby=\"serial-number-help\"\n                        placeholder=\"Serial number\"\n                        name=\"serialNumber\"\n                        value={serialNumber}\n                        onChange={e => setSerialNumber(e.target.value)}\n                        disabled={true}\n                    />\n                    <small id=\"serial-number-help\" className=\"form-text text-muted\">The serial number of edge\n                        device.</small>\n                </div>\n\n                <div className=\"form-group mt-2\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input\n                        id=\"name\"\n                        className={`form-control ${nameValid ? `` : `is-invalid`}`}\n                        type=\"text\"\n                        placeholder=\"Name\"\n                        name=\"name\"\n                        onChange={e => setName(e.target.value)}\n                        value={name}\n                        required={true}\n                        pattern={'[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*'}\n                        title={'Name must contain lowercase characters, dash(-) and numbers only.'}\n                    />\n                </div>\n                { !nameValid && <p className=\"text-danger\">\n                    Please enter a name\n                </p>}\n\n                <div className=\"form-group mt-2\">\n                    <label htmlFor=\"address\">Address</label>\n                    <input\n                        id=\"address\"\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"address\"\n                        value={address}\n                        onChange={e => setAddress(e.target.value)}\n                        disabled={true}\n                    />\n                    <small id=\"serial-number-help\" className=\"form-text text-muted\">Current location of edge\n                        device.</small>\n                </div>\n\n                <div className=\"form-group mt-2\">\n                    <label htmlFor=\"keystore-password\">Keystore password</label>\n                    <input\n                        id=\"keystore-password\"\n                        className={`form-control ${keystorePasswordValid ? `` : `is-invalid`}`}\n                        type=\"password\"\n                        placeholder=\"Keystore password\"\n                        name=\"keystorePassword\"\n                        onChange={e => setKeystorePassword(e.target.value)}\n                        value={keystorePassword}\n                        required={true}\n                    />\n                </div>\n                { !keystorePasswordValid && <p className=\"text-danger\">\n                    Please enter a valid keystore password\n                </p>}\n\n                <div className=\"form-group mt-2\">\n                    <label htmlFor=\"keystore-password-confirmation\">Keystore password confirmation</label>\n                    <input\n                        id=\"keystore-password-confirmation\"\n                        className={`form-control ${keystorePasswordConfirmationValid ? `` : `is-invalid`}`}\n                        type=\"password\"\n                        placeholder=\"Keystore password confirmation\"\n                        name=\"keystorePasswordConfirmation\"\n                        onChange={e => setKeystorePasswordConfirmation(e.target.value)}\n                        value={keystorePasswordConfirmation}\n                        required={true}\n                    />\n                </div>\n                { !keystorePasswordConfirmationValid && <p className=\"text-danger\">\n                    Please enter a valid keystore password confirmation\n                </p>}\n\n                <button type=\"submit\" className=\"btn btn-primary w-100 mt-4\">\n                    Submit\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}