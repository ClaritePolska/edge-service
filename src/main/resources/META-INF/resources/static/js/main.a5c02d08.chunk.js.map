{"version":3,"sources":["services/edge.service.js","models/coordinates.model.js","services/location.service.js","models/registerRequest.model.js","App.js","reportWebVitals.js","index.js"],"names":["a","fetch","process","response","json","serialNumber","console","log","request","method","headers","body","JSON","stringify","CoordinatesModel","lat","lon","this","navigator","options","enableHighAccuracy","Promise","resolve","reject","geolocation","getCurrentPosition","position","coordinates","coords","latitude","longitude","defaultCoords","latlon","address","country","city","town","RegisterRequestModel","serial","keyStorePassword","name","data","useInput","initialValue","useState","value","setValue","touched","setTouched","reset","bind","onChange","event","target","App","touchedName","setTouchedName","bindName","resetName","touchedKeyStorePassword","setTouchedKeyStorePassword","bindKeyStorePassword","resetKeyStorePassword","keyStorePasswordConfirmation","touchedKeyStorePasswordConfirmation","setTouchedKeyStorePasswordConfirmation","bindKeyStorePasswordConfirmation","resetKeyStorePasswordConfirmation","nameNotMatch","nameTooShort","keyStorePasswordTooShort","keyStorePasswordConfirmationTooShort","keyStorePasswordConfirmationNotMatch","error","setError","isNameLengthEnough","length","isKeyStorePasswordLengthEnough","isKeyStorePasswordConfirmationLongEnough","useEffect","value1","value2","test","setAddress","setCoordinates","showAlert","setShowAlert","alertHeader","setAlertHeader","alertMessage","setAlertMessage","LocationService","then","getLocationDetails","className","href","src","alt","onSubmit","preventDefault","EdgeService","registerEdgeDevice","resp","status","setTimeout","role","htmlFor","id","type","aria-describedby","placeholder","disabled","required","pattern","title","e","Object","entries","some","x","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5c02d08.chunk.js","sourcesContent":["class EdgeService {\r\n    async getSerialNumber() {\r\n        const response = await fetch(\r\n            `${process.env.REACT_APP_EDGE_SERVICE_URL}/serial-number`\r\n        );\r\n        const { serialNumber } = await response.json();\r\n        console.log(serialNumber);\r\n        return serialNumber;\r\n    }\r\n\r\n    async registerEdgeDevice(request) {\r\n        const response = await fetch(`${process.env.REACT_APP_EDGE_SERVICE_URL}/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({...request})\r\n        })\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\nexport default new EdgeService();","class CoordinatesModel {\r\n    constructor(lat, lon) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n    }\r\n}\r\nexport default CoordinatesModel;","import CoordinatesModel from \"../models/coordinates.model\";\r\nconst apiKey = process.env.REACT_APP_MY_API_KEY_LOCATION;\r\n\r\nclass LocationService {\r\n    getCurrentPosition() {\r\n        if (\"geolocation\" in navigator) {\r\n            console.log(\"Available\");\r\n            const options = {\r\n                enableHighAccuracy: true,\r\n            };\r\n\r\n            return new Promise((resolve, reject) =>\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        const coordinates = new CoordinatesModel(\r\n                            position.coords.latitude,\r\n                            position.coords.longitude\r\n                        );\r\n\r\n                        resolve(coordinates);\r\n                    },\r\n                    () => {\r\n                        const defaultCoords = new CoordinatesModel(52.184139, 21.020510);\r\n                        resolve(defaultCoords);\r\n                    },\r\n                    options\r\n                )\r\n            );\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                const defaultCoords = new CoordinatesModel(52.184139, 21.020510);\r\n                resolve(defaultCoords);\r\n            });\r\n        }\r\n    }\r\n\r\n    async getLocationDetails(latlon) {\r\n        const response = await fetch(\r\n            \"https://us1.locationiq.com/v1/reverse.php?key=\" +\r\n            apiKey +\r\n            \"&lat=\" +\r\n            latlon.lat +\r\n            \"&lon=\" +\r\n            latlon.lon +\r\n            \"&format=json\"\r\n        );\r\n        const {address:{country, city, town}} = await response.json();\r\n        return {country, city: city ?? town};\r\n    }\r\n}\r\nexport default new LocationService();","class RegisterRequestModel {\r\n    constructor(latitude,\r\n                longitude,\r\n                serial,\r\n                keyStorePassword,\r\n                name) {\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n        this.serial = serial;\r\n        this.keyStorePassword = keyStorePassword;\r\n        this.name = name;\r\n    }\r\n\r\n    static create(data) {\r\n        return new RegisterRequestModel(data);\r\n    }\r\n}\r\n\r\nexport default RegisterRequestModel;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport EdgeService from './services/edge.service.js';\nimport LocationService from './services/location.service';\nimport RegisterRequestModel from \"./models/registerRequest.model\";\n\nconst useInput = initialValue => {\n    const [value, setValue] = useState(initialValue);\n    const [touched, setTouched] = useState(false);\n\n    return {\n        value,\n        setValue,\n        touched,\n        setTouched,\n        reset: () => setValue(''),\n        bind: {\n            value,\n            onChange: event => {\n                setValue(event.target.value);\n                setTouched(true)\n            }\n        }\n    };\n}\n\nconst App = () => {\n    const {\n        value: name,\n        touched: touchedName,\n        setTouched: setTouchedName,\n        bind: bindName,\n        reset: resetName\n    } = useInput('');\n    const {\n        value: keyStorePassword,\n        touched: touchedKeyStorePassword,\n        setTouched: setTouchedKeyStorePassword,\n        bind: bindKeyStorePassword,\n        reset: resetKeyStorePassword\n    } = useInput('');\n    const {\n        value: keyStorePasswordConfirmation,\n        touched: touchedKeyStorePasswordConfirmation,\n        setTouched: setTouchedKeyStorePasswordConfirmation,\n        bind: bindKeyStorePasswordConfirmation,\n        reset: resetKeyStorePasswordConfirmation\n    } = useInput('');\n\n    const [error, setError] = useState({\n        nameNotMatch: false,\n        nameTooShort: false,\n        keyStorePasswordTooShort: false,\n        keyStorePasswordConfirmationTooShort: false,\n        keyStorePasswordConfirmationNotMatch: false,\n    });\n\n    const isNameNotMatchRegex = value => !/^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/g.test(value);\n    const isNameLengthEnough = value => value.length < 5;\n    const isKeyStorePasswordLengthEnough = value => value.length < 5;\n    const isKeyStorePasswordConfirmationLongEnough = value => value.length < 5;\n    const isKeyStorePasswordConfirmationNotMatchKeyStorePassword = (value1, value2) => value1 !== value2;\n\n    const isValid = () => Object.entries(error).some(x => x[1]);\n\n    useEffect(() => {\n        setError({\n            nameNotMatch: isNameNotMatchRegex(name),\n            nameTooShort: isNameLengthEnough(name),\n            keyStorePasswordTooShort: isKeyStorePasswordLengthEnough(keyStorePassword),\n            keyStorePasswordConfirmationTooShort: isKeyStorePasswordConfirmationLongEnough(keyStorePasswordConfirmation),\n            keyStorePasswordConfirmationNotMatch: isKeyStorePasswordConfirmationNotMatchKeyStorePassword(keyStorePassword, keyStorePasswordConfirmation),\n        });\n    }, [name, keyStorePassword, keyStorePasswordConfirmation]);\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const {latitude, longitude} = coordinates;\n\n        const response = EdgeService.registerEdgeDevice(new RegisterRequestModel(latitude, longitude, process.env.REACT_APP_RPI_SERIAL_NUMBER, keyStorePassword, name))\n            .then(resp => {\n\n                setShowAlert(true);\n                if (resp.status === 200) {\n                    setAlertHeader('Success!');\n                    setAlertMessage('The edge device was registered successfully!')\n                    setTimeout(() => {\n                        setShowAlert(false);\n                        resetName()\n                        resetKeyStorePassword();\n                        resetKeyStorePasswordConfirmation();\n\n                        setTouchedName(false);\n                        setTouchedKeyStorePassword(false);\n                        setTouchedKeyStorePasswordConfirmation(false);\n                    }, 2000)\n                    return;\n                }\n\n                setAlertHeader('Error!');\n                setAlertMessage('Internal server error.');\n                setTimeout(() => {\n                    setShowAlert(false);\n                }, 2000)\n            });\n    }\n\n    const [address, setAddress] = useState(\"\");\n    const [coordinates, setCoordinates] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertHeader, setAlertHeader] = useState('');\n    const [alertMessage, setAlertMessage] = useState('');\n\n    useEffect(() => {\n        LocationService.getCurrentPosition()\n            .then(value => {\n                setCoordinates({\n                    latitude: value.lat,\n                    longitude: value.lon\n                })\n                return LocationService.getLocationDetails(value)\n            })\n            .then(value => {\n                setAddress(`${value.country}, ${value.city}`)\n            })\n    }, [])\n\n    return (\n        <div className=\"container-fluid col-8 offset-2\">\n            <div className=\"row m-5 justify-content-center\">\n                <div className='d-flex justify-content-center'>\n                    <a href=\"https://events.redhat.com/profile/form/index.cfm?PKformID=0x3155530001\">\n                        <img className={'img-fluid d-block'}\n                             src={`${process.env.PUBLIC_URL}/images/quarkus_iot_logo.png`}\n                             alt={'RedHat QIoT Hackfest 2021'}/>\n                    </a>\n                </div>\n\n                <div className='d-flex justify-content-center mt-3'>\n                    <h1 className='heading text-uppercase'>Register device form</h1>\n                </div>\n\n                <form className=\"needs-validation mt-3\" onSubmit={handleSubmit}>\n                    {showAlert && <div className={`alert ${alertHeader === 'Success!' ? `alert-success` : `alert-danger`}`} role=\"alert\">\n                        <h4 className=\"alert-heading\">{alertHeader}</h4>\n                        <p>{alertMessage}</p>\n                    </div>}\n\n                    <div className=\"form-group mt-3\">\n                        <label htmlFor=\"serial-number\">Serial number</label>\n                        <input\n                            id=\"serial-number\"\n                            className=\"form-control\"\n                            type=\"text\"\n                            aria-describedby=\"serial-number-help\"\n                            placeholder=\"Serial number\"\n                            name=\"serialNumber\"\n                            value={process.env.REACT_APP_RPI_SERIAL_NUMBER}\n                            disabled={true}\n                        />\n                        <small id=\"serial-number-help\" className=\"form-text text-muted\">The serial number of edge\n                            device.</small>\n                    </div>\n\n                    <div className=\"form-group mt-3\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input\n                            id=\"name\"\n                            className={`form-control ${(error.nameTooShort || error.nameNotMatch) && touchedName ? `is-invalid` : ``}`}\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            name=\"name\"\n                            {...bindName}\n                            required={true}\n                            pattern={'[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*'}\n                            title={'Name must contain lowercase characters, dash(-) and numbers only.'}\n                        />\n                    </div>\n                    {error.nameTooShort && touchedName && <p className=\"text-danger\">\n                        Name must contain at least 5 characters.\n                    </p>}\n                    {error.nameNotMatch && touchedName && <p className=\"text-danger\">\n                        Name must contain lowercase characters, dash(-) and numbers only.\n                    </p>}\n\n                    <div className=\"form-group mt-3\">\n                        <label htmlFor=\"address\">Address</label>\n                        <input\n                            id=\"address\"\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"address\"\n                            value={address}\n                            onChange={e => setAddress(e.target.value)}\n                            disabled={true}\n                        />\n                        <small id=\"serial-number-help\" className=\"form-text text-muted\">Current location of edge\n                            device.</small>\n                    </div>\n\n                    <div className=\"form-group mt-3\">\n                        <label htmlFor=\"keystore-password\">Keystore password</label>\n                        <input\n                            id=\"keystore-password\"\n                            className={`form-control ${error.keyStorePasswordTooShort && touchedKeyStorePassword ? `is-invalid` : ``}`}\n                            type=\"password\"\n                            placeholder=\"Keystore password\"\n                            name=\"keystorePassword\"\n                            {...bindKeyStorePassword}\n                            required={true}\n                        />\n                    </div>\n                    {error.keyStorePasswordTooShort && touchedKeyStorePassword && <p className=\"text-danger\">\n                        Keystore password must contain at least 5 characters.\n                    </p>}\n\n                    <div className=\"form-group mt-3\">\n                        <label htmlFor=\"keystore-password-confirmation\">Keystore password confirmation</label>\n                        <input\n                            id=\"keystore-password-confirmation\"\n                            className={`form-control ${(error.keyStorePasswordConfirmationTooShort || error.keyStorePasswordConfirmationNotMatch) && touchedKeyStorePasswordConfirmation ? `is-invalid` : ``}`}\n                            type=\"password\"\n                            placeholder=\"Keystore password confirmation\"\n                            name=\"keystorePasswordConfirmation\"\n                            {...bindKeyStorePasswordConfirmation}\n                            required={true}\n                        />\n                    </div>\n                    {error.keyStorePasswordConfirmationTooShort && touchedKeyStorePasswordConfirmation && <p className=\"text-danger\">\n                        Keystore password must contain at least 5 characters.\n                    </p>}\n                    {error.keyStorePasswordConfirmationNotMatch && touchedKeyStorePasswordConfirmation && <p className=\"text-danger\">\n                        Confirmation password does not match keystore password.\n                    </p>}\n\n                    <button disabled={isValid()} type=\"submit\" className=\"btn btn-primary w-100 mt-4\">\n                        Submit\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}