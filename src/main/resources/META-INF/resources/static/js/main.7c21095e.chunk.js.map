{"version":3,"sources":["services/edge.service.js","models/coordinates.model.js","services/location.service.js","App.js","reportWebVitals.js","index.js"],"names":["a","fetch","process","response","json","serialNumber","console","log","CoordinatesModel","lat","lon","this","navigator","options","enableHighAccuracy","Promise","resolve","reject","geolocation","getCurrentPosition","position","coordinates","coords","latitude","longitude","defaultCoords","latlon","address","country","city","App","useState","setSerialNumber","name","setName","setAddress","setCoordinates","keystorePassword","setKeystorePassword","keystorePasswordConfirmation","setKeystorePasswordConfirmation","useEffect","EdgeService","getSerialNumber","then","value","LocationService","getLocationDetails","className","onSubmit","e","preventDefault","method","headers","body","JSON","stringify","serial","id","type","placeholder","onChange","target","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c21095e.chunk.js","sourcesContent":["class EdgeService {\r\n    async getSerialNumber() {\r\n        const response = await fetch(\r\n            `${process.env.REACT_APP_EDGE_SERVICE_URL}/serial-number`\r\n        );\r\n        const { serialNumber } = await response.json();\r\n        console.log(serialNumber);\r\n        return serialNumber;\r\n    }\r\n}\r\n\r\nexport default new EdgeService();","class CoordinatesModel {\r\n    constructor(lat, lon) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n    }\r\n}\r\nexport default CoordinatesModel;","import CoordinatesModel from \"../models/coordinates.model\";\r\nconst apiKey = process.env.REACT_APP_MY_API_KEY_LOCATION;\r\n\r\nclass LocationService {\r\n    getCurrentPosition() {\r\n        if (\"geolocation\" in navigator) {\r\n            console.log(\"Available\");\r\n            const options = {\r\n                enableHighAccuracy: true,\r\n            };\r\n\r\n            return new Promise((resolve, reject) =>\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        const coordinates = new CoordinatesModel(\r\n                            position.coords.latitude,\r\n                            position.coords.longitude\r\n                        );\r\n\r\n                        resolve(coordinates);\r\n                    },\r\n                    () => {\r\n                        const defaultCoords = new CoordinatesModel(21.020510, 52.184139);\r\n                        resolve(defaultCoords);\r\n                    },\r\n                    options\r\n                )\r\n            );\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                const defaultCoords = new CoordinatesModel(21.020510, 52.184139);\r\n                resolve(defaultCoords);\r\n            });\r\n        }\r\n    }\r\n\r\n    async getLocationDetails(latlon) {\r\n        const response = await fetch(\r\n            \"https://us1.locationiq.com/v1/reverse.php?key=\" +\r\n            apiKey +\r\n            \"&lat=\" +\r\n            latlon.lat +\r\n            \"&lon=\" +\r\n            latlon.lon +\r\n            \"&format=json\"\r\n        );\r\n        const {address:{country, city}} = await response.json();\r\n        return {country, city};\r\n    }\r\n}\r\nexport default new LocationService();","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport EdgeService from './services/edge.service.js';\nimport LocationService from './services/location.service';\n\nconst App = () => {\n    const [serialNumber, setSerialNumber] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [coordinates, setCoordinates] = useState();\n    const [keystorePassword, setKeystorePassword] = useState(\"\");\n    const [keystorePasswordConfirmation, setKeystorePasswordConfirmation] = useState(\"\");\n\n    useEffect(() => {\n        EdgeService.getSerialNumber().then(value => setSerialNumber(value));\n    }, []);\n\n    useEffect(() => {\n        LocationService.getCurrentPosition()\n            .then(value => {\n                setCoordinates({\n                    latitude: value.lat,\n                    longitude: value.lon\n                })\n                return LocationService.getLocationDetails(value)\n            })\n            .then(value => {\n                setAddress(`${value.country}, ${value.city}`)\n            })\n    }, [])\n\n    return (\n        <div className=\"form-container\">\n            <form className=\"register-form\" onSubmit={e => {\n                e.preventDefault()\n                const {latitude, longitude} = coordinates;\n                fetch(`${process.env.REACT_APP_EDGE_SERVICE_URL}/register`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({latitude, longitude, serial: serialNumber, keystorePassword, name})\n                })\n            }}>\n                <div className=\"success-message\">The edge device was registered successfully!</div>\n                <input\n                    id=\"serial-number\"\n                    className=\"form-field\"\n                    type=\"text\"\n                    placeholder=\"Serial number\"\n                    name=\"serialNumber\"\n                    value={serialNumber}\n                    onChange={e => setSerialNumber(e.target.value)}\n                    disabled={true}\n                />\n                <span id=\"serial-number-error\">Please enter a serial number</span>\n                <input\n                    id=\"name\"\n                    className=\"form-field\"\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    name=\"name\"\n                    onChange={e => setName(e.target.value)}\n                    value={name}\n                />\n                <span id=\"name-error\">Please enter a name</span>\n                <input\n                    id=\"address\"\n                    className=\"form-field\"\n                    type=\"text\"\n                    name=\"address\"\n                    value={address}\n                    onChange={e => setAddress(e.target.value)}\n                    disabled={true}\n                />\n                <input\n                    id=\"keystore-password\"\n                    className=\"form-field\"\n                    type=\"password\"\n                    placeholder=\"Keystore password\"\n                    name=\"keystorePassword\"\n                    onChange={e => setKeystorePassword(e.target.value)}\n                    value={keystorePassword}\n                />\n                <span id=\"name-error\">Please enter a keystore password</span>\n                <input\n                    id=\"keystore-password-confirmation\"\n                    className=\"form-field\"\n                    type=\"password\"\n                    placeholder=\"Keystore password confirmation\"\n                    name=\"keystorePasswordConfirmation\"\n                    onChange={e => setKeystorePasswordConfirmation(e.target.value)}\n                    value={keystorePasswordConfirmation}\n                />\n                <span id=\"name-error\">Provided keystore password does not match</span>\n                <button className=\"form-field\" type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}